/**
 * AWSECommerceServiceLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Summary
 *
 * @constructor
 */
angular.module('AWSECommerceServiceLib')
    .factory('Summary', ['BaseModel', SummaryModel]);

    function SummaryModel(BaseModel) {
        var Summary = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.promotionId = this.getValue(obj.promotionId);
            this.message = this.getValue(obj.message);
            this.category = this.getValue(obj.category);
            this.startDate = this.getValue(obj.startDate);
            this.endDate = this.getValue(obj.endDate);
            this.eligibilityRequirementDescription = this.getValue(obj.eligibilityRequirementDescription);
            this.benefitDescription = this.getValue(obj.benefitDescription);
            this.termsAndConditions = this.getValue(obj.termsAndConditions);
        };

        Summary.prototype = new BaseModel();
        Summary.prototype.constructor = Summary;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        Summary.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'promotionId', realName: 'PromotionId' },
                { name: 'message', realName: 'Message' },
                { name: 'category', realName: 'Category' },
                { name: 'startDate', realName: 'StartDate' },
                { name: 'endDate', realName: 'EndDate' },
                { name: 'eligibilityRequirementDescription', realName: 'EligibilityRequirementDescription' },
                { name: 'benefitDescription', realName: 'BenefitDescription' },
                { name: 'termsAndConditions', realName: 'TermsAndConditions' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        Summary.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string}
         */
        Summary.prototype.getPromotionId = function () {
            return this.promotionId;
        };
    
        /**
         * Setter for PromotionId
         * 
         * @param {string} value 
         */
        Summary.prototype.setPromotionId = function (value) {
            this.promotionId = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        Summary.prototype.getMessage = function () {
            return this.message;
        };
    
        /**
         * Setter for Message
         * 
         * @param {string|null} value 
         */
        Summary.prototype.setMessage = function (value) {
            this.message = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        Summary.prototype.getCategory = function () {
            return this.category;
        };
    
        /**
         * Setter for Category
         * 
         * @param {string|null} value 
         */
        Summary.prototype.setCategory = function (value) {
            this.category = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        Summary.prototype.getStartDate = function () {
            return this.startDate;
        };
    
        /**
         * Setter for StartDate
         * 
         * @param {string|null} value 
         */
        Summary.prototype.setStartDate = function (value) {
            this.startDate = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        Summary.prototype.getEndDate = function () {
            return this.endDate;
        };
    
        /**
         * Setter for EndDate
         * 
         * @param {string|null} value 
         */
        Summary.prototype.setEndDate = function (value) {
            this.endDate = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        Summary.prototype.getEligibilityRequirementDescription = function () {
            return this.eligibilityRequirementDescription;
        };
    
        /**
         * Setter for EligibilityRequirementDescription
         * 
         * @param {string|null} value 
         */
        Summary.prototype.setEligibilityRequirementDescription = function (value) {
            this.eligibilityRequirementDescription = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        Summary.prototype.getBenefitDescription = function () {
            return this.benefitDescription;
        };
    
        /**
         * Setter for BenefitDescription
         * 
         * @param {string|null} value 
         */
        Summary.prototype.setBenefitDescription = function (value) {
            this.benefitDescription = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        Summary.prototype.getTermsAndConditions = function () {
            return this.termsAndConditions;
        };
    
        /**
         * Setter for TermsAndConditions
         * 
         * @param {string|null} value 
         */
        Summary.prototype.setTermsAndConditions = function (value) {
            this.termsAndConditions = value;
        };
    
        return Summary;
    }

}(angular));
