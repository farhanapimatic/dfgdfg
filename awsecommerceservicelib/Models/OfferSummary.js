/**
 * AWSECommerceServiceLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of OfferSummary
 *
 * @constructor
 */
angular.module('AWSECommerceServiceLib')
    .factory('OfferSummary', ['BaseModel', OfferSummaryModel]);

    function OfferSummaryModel(BaseModel) {
        var OfferSummary = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.lowestNewPrice = this.getValue(obj.lowestNewPrice);
            this.lowestUsedPrice = this.getValue(obj.lowestUsedPrice);
            this.lowestCollectiblePrice = this.getValue(obj.lowestCollectiblePrice);
            this.lowestRefurbishedPrice = this.getValue(obj.lowestRefurbishedPrice);
            this.totalNew = this.getValue(obj.totalNew);
            this.totalUsed = this.getValue(obj.totalUsed);
            this.totalCollectible = this.getValue(obj.totalCollectible);
            this.totalRefurbished = this.getValue(obj.totalRefurbished);
        };

        OfferSummary.prototype = new BaseModel();
        OfferSummary.prototype.constructor = OfferSummary;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        OfferSummary.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'lowestNewPrice', realName: 'LowestNewPrice', type: 'Price' },
                { name: 'lowestUsedPrice', realName: 'LowestUsedPrice', type: 'Price' },
                { name: 'lowestCollectiblePrice', realName: 'LowestCollectiblePrice', type: 'Price' },
                { name: 'lowestRefurbishedPrice', realName: 'LowestRefurbishedPrice', type: 'Price' },
                { name: 'totalNew', realName: 'TotalNew' },
                { name: 'totalUsed', realName: 'TotalUsed' },
                { name: 'totalCollectible', realName: 'TotalCollectible' },
                { name: 'totalRefurbished', realName: 'TotalRefurbished' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        OfferSummary.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {Price|null}
         */
        OfferSummary.prototype.getLowestNewPrice = function () {
            return this.lowestNewPrice;
        };
    
        /**
         * Setter for LowestNewPrice
         * 
         * @param {Price|null} value 
         */
        OfferSummary.prototype.setLowestNewPrice = function (value) {
            this.lowestNewPrice = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {Price|null}
         */
        OfferSummary.prototype.getLowestUsedPrice = function () {
            return this.lowestUsedPrice;
        };
    
        /**
         * Setter for LowestUsedPrice
         * 
         * @param {Price|null} value 
         */
        OfferSummary.prototype.setLowestUsedPrice = function (value) {
            this.lowestUsedPrice = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {Price|null}
         */
        OfferSummary.prototype.getLowestCollectiblePrice = function () {
            return this.lowestCollectiblePrice;
        };
    
        /**
         * Setter for LowestCollectiblePrice
         * 
         * @param {Price|null} value 
         */
        OfferSummary.prototype.setLowestCollectiblePrice = function (value) {
            this.lowestCollectiblePrice = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {Price|null}
         */
        OfferSummary.prototype.getLowestRefurbishedPrice = function () {
            return this.lowestRefurbishedPrice;
        };
    
        /**
         * Setter for LowestRefurbishedPrice
         * 
         * @param {Price|null} value 
         */
        OfferSummary.prototype.setLowestRefurbishedPrice = function (value) {
            this.lowestRefurbishedPrice = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        OfferSummary.prototype.getTotalNew = function () {
            return this.totalNew;
        };
    
        /**
         * Setter for TotalNew
         * 
         * @param {string|null} value 
         */
        OfferSummary.prototype.setTotalNew = function (value) {
            this.totalNew = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        OfferSummary.prototype.getTotalUsed = function () {
            return this.totalUsed;
        };
    
        /**
         * Setter for TotalUsed
         * 
         * @param {string|null} value 
         */
        OfferSummary.prototype.setTotalUsed = function (value) {
            this.totalUsed = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        OfferSummary.prototype.getTotalCollectible = function () {
            return this.totalCollectible;
        };
    
        /**
         * Setter for TotalCollectible
         * 
         * @param {string|null} value 
         */
        OfferSummary.prototype.setTotalCollectible = function (value) {
            this.totalCollectible = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        OfferSummary.prototype.getTotalRefurbished = function () {
            return this.totalRefurbished;
        };
    
        /**
         * Setter for TotalRefurbished
         * 
         * @param {string|null} value 
         */
        OfferSummary.prototype.setTotalRefurbished = function (value) {
            this.totalRefurbished = value;
        };
    
        return OfferSummary;
    }

}(angular));
