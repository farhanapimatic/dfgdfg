/**
 * AWSECommerceServiceLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of ImageSet
 *
 * @constructor
 */
angular.module('AWSECommerceServiceLib')
    .factory('ImageSet', ['BaseModel', ImageSetModel]);

    function ImageSetModel(BaseModel) {
        var ImageSet = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.category = this.getValue(obj.category);
            this.swatchImage = this.getValue(obj.swatchImage);
            this.smallImage = this.getValue(obj.smallImage);
            this.thumbnailImage = this.getValue(obj.thumbnailImage);
            this.tinyImage = this.getValue(obj.tinyImage);
            this.mediumImage = this.getValue(obj.mediumImage);
            this.largeImage = this.getValue(obj.largeImage);
            this.hiResImage = this.getValue(obj.hiResImage);
        };

        ImageSet.prototype = new BaseModel();
        ImageSet.prototype.constructor = ImageSet;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        ImageSet.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'category', realName: 'Category' },
                { name: 'swatchImage', realName: 'SwatchImage', type: 'Image' },
                { name: 'smallImage', realName: 'SmallImage', type: 'Image' },
                { name: 'thumbnailImage', realName: 'ThumbnailImage', type: 'Image' },
                { name: 'tinyImage', realName: 'TinyImage', type: 'Image' },
                { name: 'mediumImage', realName: 'MediumImage', type: 'Image' },
                { name: 'largeImage', realName: 'LargeImage', type: 'Image' },
                { name: 'hiResImage', realName: 'HiResImage', type: 'Image' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        ImageSet.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        ImageSet.prototype.getCategory = function () {
            return this.category;
        };
    
        /**
         * Setter for Category
         * 
         * @param {string|null} value 
         */
        ImageSet.prototype.setCategory = function (value) {
            this.category = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {Image|null}
         */
        ImageSet.prototype.getSwatchImage = function () {
            return this.swatchImage;
        };
    
        /**
         * Setter for SwatchImage
         * 
         * @param {Image|null} value 
         */
        ImageSet.prototype.setSwatchImage = function (value) {
            this.swatchImage = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {Image|null}
         */
        ImageSet.prototype.getSmallImage = function () {
            return this.smallImage;
        };
    
        /**
         * Setter for SmallImage
         * 
         * @param {Image|null} value 
         */
        ImageSet.prototype.setSmallImage = function (value) {
            this.smallImage = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {Image|null}
         */
        ImageSet.prototype.getThumbnailImage = function () {
            return this.thumbnailImage;
        };
    
        /**
         * Setter for ThumbnailImage
         * 
         * @param {Image|null} value 
         */
        ImageSet.prototype.setThumbnailImage = function (value) {
            this.thumbnailImage = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {Image|null}
         */
        ImageSet.prototype.getTinyImage = function () {
            return this.tinyImage;
        };
    
        /**
         * Setter for TinyImage
         * 
         * @param {Image|null} value 
         */
        ImageSet.prototype.setTinyImage = function (value) {
            this.tinyImage = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {Image|null}
         */
        ImageSet.prototype.getMediumImage = function () {
            return this.mediumImage;
        };
    
        /**
         * Setter for MediumImage
         * 
         * @param {Image|null} value 
         */
        ImageSet.prototype.setMediumImage = function (value) {
            this.mediumImage = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {Image|null}
         */
        ImageSet.prototype.getLargeImage = function () {
            return this.largeImage;
        };
    
        /**
         * Setter for LargeImage
         * 
         * @param {Image|null} value 
         */
        ImageSet.prototype.setLargeImage = function (value) {
            this.largeImage = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {Image|null}
         */
        ImageSet.prototype.getHiResImage = function () {
            return this.hiResImage;
        };
    
        /**
         * Setter for HiResImage
         * 
         * @param {Image|null} value 
         */
        ImageSet.prototype.setHiResImage = function (value) {
            this.hiResImage = value;
        };
    
        return ImageSet;
    }

}(angular));
