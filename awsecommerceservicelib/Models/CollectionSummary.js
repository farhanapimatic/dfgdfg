/**
 * AWSECommerceServiceLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of CollectionSummary
 *
 * @constructor
 */
angular.module('AWSECommerceServiceLib')
    .factory('CollectionSummary', ['BaseModel', CollectionSummaryModel]);

    function CollectionSummaryModel(BaseModel) {
        var CollectionSummary = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.lowestListPrice = this.getValue(obj.lowestListPrice);
            this.highestListPrice = this.getValue(obj.highestListPrice);
            this.lowestSalePrice = this.getValue(obj.lowestSalePrice);
            this.highestSalePrice = this.getValue(obj.highestSalePrice);
        };

        CollectionSummary.prototype = new BaseModel();
        CollectionSummary.prototype.constructor = CollectionSummary;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        CollectionSummary.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'lowestListPrice', realName: 'LowestListPrice', type: 'Price' },
                { name: 'highestListPrice', realName: 'HighestListPrice', type: 'Price' },
                { name: 'lowestSalePrice', realName: 'LowestSalePrice', type: 'Price' },
                { name: 'highestSalePrice', realName: 'HighestSalePrice', type: 'Price' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        CollectionSummary.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {Price|null}
         */
        CollectionSummary.prototype.getLowestListPrice = function () {
            return this.lowestListPrice;
        };
    
        /**
         * Setter for LowestListPrice
         * 
         * @param {Price|null} value 
         */
        CollectionSummary.prototype.setLowestListPrice = function (value) {
            this.lowestListPrice = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {Price|null}
         */
        CollectionSummary.prototype.getHighestListPrice = function () {
            return this.highestListPrice;
        };
    
        /**
         * Setter for HighestListPrice
         * 
         * @param {Price|null} value 
         */
        CollectionSummary.prototype.setHighestListPrice = function (value) {
            this.highestListPrice = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {Price|null}
         */
        CollectionSummary.prototype.getLowestSalePrice = function () {
            return this.lowestSalePrice;
        };
    
        /**
         * Setter for LowestSalePrice
         * 
         * @param {Price|null} value 
         */
        CollectionSummary.prototype.setLowestSalePrice = function (value) {
            this.lowestSalePrice = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {Price|null}
         */
        CollectionSummary.prototype.getHighestSalePrice = function () {
            return this.highestSalePrice;
        };
    
        /**
         * Setter for HighestSalePrice
         * 
         * @param {Price|null} value 
         */
        CollectionSummary.prototype.setHighestSalePrice = function (value) {
            this.highestSalePrice = value;
        };
    
        return CollectionSummary;
    }

}(angular));
