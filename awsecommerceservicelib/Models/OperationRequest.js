/**
 * AWSECommerceServiceLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of OperationRequest
 *
 * @constructor
 */
angular.module('AWSECommerceServiceLib')
    .factory('OperationRequest', ['BaseModel', OperationRequestModel]);

    function OperationRequestModel(BaseModel) {
        var OperationRequest = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.hTTPHeaders = this.getValue(obj.hTTPHeaders);
            this.requestId = this.getValue(obj.requestId);
            this.marguments = this.getValue(obj.marguments);
            this.errors = this.getValue(obj.errors);
            this.requestProcessingTime = this.getValue(obj.requestProcessingTime);
        };

        OperationRequest.prototype = new BaseModel();
        OperationRequest.prototype.constructor = OperationRequest;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        OperationRequest.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'hTTPHeaders', realName: 'HTTPHeaders', type: 'HTTPHeaders' },
                { name: 'requestId', realName: 'RequestId' },
                { name: 'marguments', realName: 'Arguments', type: 'Arguments' },
                { name: 'errors', realName: 'Errors', type: 'Errors' },
                { name: 'requestProcessingTime', realName: 'RequestProcessingTime' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        OperationRequest.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {HTTPHeaders|null}
         */
        OperationRequest.prototype.getHTTPHeaders = function () {
            return this.hTTPHeaders;
        };
    
        /**
         * Setter for HTTPHeaders
         * 
         * @param {HTTPHeaders|null} value 
         */
        OperationRequest.prototype.setHTTPHeaders = function (value) {
            this.hTTPHeaders = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        OperationRequest.prototype.getRequestId = function () {
            return this.requestId;
        };
    
        /**
         * Setter for RequestId
         * 
         * @param {string|null} value 
         */
        OperationRequest.prototype.setRequestId = function (value) {
            this.requestId = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {Arguments|null}
         */
        OperationRequest.prototype.getArguments = function () {
            return this.marguments;
        };
    
        /**
         * Setter for Arguments
         * 
         * @param {Arguments|null} value 
         */
        OperationRequest.prototype.setArguments = function (value) {
            this.marguments = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {Errors|null}
         */
        OperationRequest.prototype.getErrors = function () {
            return this.errors;
        };
    
        /**
         * Setter for Errors
         * 
         * @param {Errors|null} value 
         */
        OperationRequest.prototype.setErrors = function (value) {
            this.errors = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {double|null}
         */
        OperationRequest.prototype.getRequestProcessingTime = function () {
            return this.requestProcessingTime;
        };
    
        /**
         * Setter for RequestProcessingTime
         * 
         * @param {double|null} value 
         */
        OperationRequest.prototype.setRequestProcessingTime = function (value) {
            this.requestProcessingTime = value;
        };
    
        return OperationRequest;
    }

}(angular));
