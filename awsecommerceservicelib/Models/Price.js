/**
 * AWSECommerceServiceLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Price
 *
 * @constructor
 */
angular.module('AWSECommerceServiceLib')
    .factory('Price', ['BaseModel', PriceModel]);

    function PriceModel(BaseModel) {
        var Price = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.formattedPrice = this.getValue(obj.formattedPrice);
            this.amount = this.getValue(obj.amount);
            this.currencyCode = this.getValue(obj.currencyCode);
        };

        Price.prototype = new BaseModel();
        Price.prototype.constructor = Price;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        Price.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'formattedPrice', realName: 'FormattedPrice' },
                { name: 'amount', realName: 'Amount' },
                { name: 'currencyCode', realName: 'CurrencyCode' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        Price.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string}
         */
        Price.prototype.getFormattedPrice = function () {
            return this.formattedPrice;
        };
    
        /**
         * Setter for FormattedPrice
         * 
         * @param {string} value 
         */
        Price.prototype.setFormattedPrice = function (value) {
            this.formattedPrice = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {int|null}
         */
        Price.prototype.getAmount = function () {
            return this.amount;
        };
    
        /**
         * Setter for Amount
         * 
         * @param {int|null} value 
         */
        Price.prototype.setAmount = function (value) {
            this.amount = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        Price.prototype.getCurrencyCode = function () {
            return this.currencyCode;
        };
    
        /**
         * Setter for CurrencyCode
         * 
         * @param {string|null} value 
         */
        Price.prototype.setCurrencyCode = function (value) {
            this.currencyCode = value;
        };
    
        return Price;
    }

}(angular));
