/**
 * AWSECommerceServiceLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of VariationSummary
 *
 * @constructor
 */
angular.module('AWSECommerceServiceLib')
    .factory('VariationSummary', ['BaseModel', VariationSummaryModel]);

    function VariationSummaryModel(BaseModel) {
        var VariationSummary = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.lowestPrice = this.getValue(obj.lowestPrice);
            this.highestPrice = this.getValue(obj.highestPrice);
            this.lowestSalePrice = this.getValue(obj.lowestSalePrice);
            this.highestSalePrice = this.getValue(obj.highestSalePrice);
        };

        VariationSummary.prototype = new BaseModel();
        VariationSummary.prototype.constructor = VariationSummary;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        VariationSummary.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'lowestPrice', realName: 'LowestPrice', type: 'Price' },
                { name: 'highestPrice', realName: 'HighestPrice', type: 'Price' },
                { name: 'lowestSalePrice', realName: 'LowestSalePrice', type: 'Price' },
                { name: 'highestSalePrice', realName: 'HighestSalePrice', type: 'Price' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        VariationSummary.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {Price|null}
         */
        VariationSummary.prototype.getLowestPrice = function () {
            return this.lowestPrice;
        };
    
        /**
         * Setter for LowestPrice
         * 
         * @param {Price|null} value 
         */
        VariationSummary.prototype.setLowestPrice = function (value) {
            this.lowestPrice = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {Price|null}
         */
        VariationSummary.prototype.getHighestPrice = function () {
            return this.highestPrice;
        };
    
        /**
         * Setter for HighestPrice
         * 
         * @param {Price|null} value 
         */
        VariationSummary.prototype.setHighestPrice = function (value) {
            this.highestPrice = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {Price|null}
         */
        VariationSummary.prototype.getLowestSalePrice = function () {
            return this.lowestSalePrice;
        };
    
        /**
         * Setter for LowestSalePrice
         * 
         * @param {Price|null} value 
         */
        VariationSummary.prototype.setLowestSalePrice = function (value) {
            this.lowestSalePrice = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {Price|null}
         */
        VariationSummary.prototype.getHighestSalePrice = function () {
            return this.highestSalePrice;
        };
    
        /**
         * Setter for HighestSalePrice
         * 
         * @param {Price|null} value 
         */
        VariationSummary.prototype.setHighestSalePrice = function (value) {
            this.highestSalePrice = value;
        };
    
        return VariationSummary;
    }

}(angular));
