/**
 * AWSECommerceServiceLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of ItemSearchRequest
 *
 * @constructor
 */
angular.module('AWSECommerceServiceLib')
    .factory('ItemSearchRequest', ['BaseModel', ItemSearchRequestModel]);

    function ItemSearchRequestModel(BaseModel) {
        var ItemSearchRequest = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.actor = this.getValue(obj.actor);
            this.artist = this.getValue(obj.artist);
            this.availability = this.getValue(obj.availability, 'Available');
            this.audienceRating = this.getValue(obj.audienceRating);
            this.author = this.getValue(obj.author);
            this.brand = this.getValue(obj.brand);
            this.browseNode = this.getValue(obj.browseNode);
            this.composer = this.getValue(obj.composer);
            this.condition = this.getValue(obj.condition);
            this.conductor = this.getValue(obj.conductor);
            this.director = this.getValue(obj.director);
            this.itemPage = this.getValue(obj.itemPage);
            this.keywords = this.getValue(obj.keywords);
            this.manufacturer = this.getValue(obj.manufacturer);
            this.maximumPrice = this.getValue(obj.maximumPrice);
            this.merchantId = this.getValue(obj.merchantId);
            this.minimumPrice = this.getValue(obj.minimumPrice);
            this.minPercentageOff = this.getValue(obj.minPercentageOff);
            this.musicLabel = this.getValue(obj.musicLabel);
            this.orchestra = this.getValue(obj.orchestra);
            this.power = this.getValue(obj.power);
            this.publisher = this.getValue(obj.publisher);
            this.relatedItemPage = this.getValue(obj.relatedItemPage);
            this.relationshipType = this.getValue(obj.relationshipType);
            this.responseGroup = this.getValue(obj.responseGroup);
            this.searchIndex = this.getValue(obj.searchIndex);
            this.sort = this.getValue(obj.sort);
            this.title = this.getValue(obj.title);
            this.releaseDate = this.getValue(obj.releaseDate);
            this.includeReviewsSummary = this.getValue(obj.includeReviewsSummary);
            this.truncateReviewsAt = this.getValue(obj.truncateReviewsAt);
        };

        ItemSearchRequest.prototype = new BaseModel();
        ItemSearchRequest.prototype.constructor = ItemSearchRequest;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        ItemSearchRequest.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'actor', realName: 'Actor' },
                { name: 'artist', realName: 'Artist' },
                { name: 'availability', realName: 'Availability' },
                { name: 'audienceRating', realName: 'AudienceRating', array: true },
                { name: 'author', realName: 'Author' },
                { name: 'brand', realName: 'Brand' },
                { name: 'browseNode', realName: 'BrowseNode' },
                { name: 'composer', realName: 'Composer' },
                { name: 'condition', realName: 'Condition' },
                { name: 'conductor', realName: 'Conductor' },
                { name: 'director', realName: 'Director' },
                { name: 'itemPage', realName: 'ItemPage' },
                { name: 'keywords', realName: 'Keywords' },
                { name: 'manufacturer', realName: 'Manufacturer' },
                { name: 'maximumPrice', realName: 'MaximumPrice' },
                { name: 'merchantId', realName: 'MerchantId' },
                { name: 'minimumPrice', realName: 'MinimumPrice' },
                { name: 'minPercentageOff', realName: 'MinPercentageOff' },
                { name: 'musicLabel', realName: 'MusicLabel' },
                { name: 'orchestra', realName: 'Orchestra' },
                { name: 'power', realName: 'Power' },
                { name: 'publisher', realName: 'Publisher' },
                { name: 'relatedItemPage', realName: 'RelatedItemPage' },
                { name: 'relationshipType', realName: 'RelationshipType', array: true },
                { name: 'responseGroup', realName: 'ResponseGroup', array: true },
                { name: 'searchIndex', realName: 'SearchIndex' },
                { name: 'sort', realName: 'Sort' },
                { name: 'title', realName: 'Title' },
                { name: 'releaseDate', realName: 'ReleaseDate' },
                { name: 'includeReviewsSummary', realName: 'IncludeReviewsSummary' },
                { name: 'truncateReviewsAt', realName: 'TruncateReviewsAt' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        ItemSearchRequest.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        ItemSearchRequest.prototype.getActor = function () {
            return this.actor;
        };
    
        /**
         * Setter for Actor
         * 
         * @param {string|null} value 
         */
        ItemSearchRequest.prototype.setActor = function (value) {
            this.actor = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        ItemSearchRequest.prototype.getArtist = function () {
            return this.artist;
        };
    
        /**
         * Setter for Artist
         * 
         * @param {string|null} value 
         */
        ItemSearchRequest.prototype.setArtist = function (value) {
            this.artist = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        ItemSearchRequest.prototype.getAvailability = function () {
            return this.availability;
        };
    
        /**
         * Setter for Availability
         * 
         * @param {string|null} value 
         */
        ItemSearchRequest.prototype.setAvailability = function (value) {
            this.availability = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {array|null}
         */
        ItemSearchRequest.prototype.getAudienceRating = function () {
            return this.audienceRating;
        };
    
        /**
         * Setter for AudienceRating
         * 
         * @param {array|null} value 
         */
        ItemSearchRequest.prototype.setAudienceRating = function (value) {
            this.audienceRating = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        ItemSearchRequest.prototype.getAuthor = function () {
            return this.author;
        };
    
        /**
         * Setter for Author
         * 
         * @param {string|null} value 
         */
        ItemSearchRequest.prototype.setAuthor = function (value) {
            this.author = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        ItemSearchRequest.prototype.getBrand = function () {
            return this.brand;
        };
    
        /**
         * Setter for Brand
         * 
         * @param {string|null} value 
         */
        ItemSearchRequest.prototype.setBrand = function (value) {
            this.brand = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        ItemSearchRequest.prototype.getBrowseNode = function () {
            return this.browseNode;
        };
    
        /**
         * Setter for BrowseNode
         * 
         * @param {string|null} value 
         */
        ItemSearchRequest.prototype.setBrowseNode = function (value) {
            this.browseNode = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        ItemSearchRequest.prototype.getComposer = function () {
            return this.composer;
        };
    
        /**
         * Setter for Composer
         * 
         * @param {string|null} value 
         */
        ItemSearchRequest.prototype.setComposer = function (value) {
            this.composer = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {ConditionEnum|null}
         */
        ItemSearchRequest.prototype.getCondition = function () {
            return this.condition;
        };
    
        /**
         * Setter for Condition
         * 
         * @param {ConditionEnum|null} value 
         */
        ItemSearchRequest.prototype.setCondition = function (value) {
            this.condition = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        ItemSearchRequest.prototype.getConductor = function () {
            return this.conductor;
        };
    
        /**
         * Setter for Conductor
         * 
         * @param {string|null} value 
         */
        ItemSearchRequest.prototype.setConductor = function (value) {
            this.conductor = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        ItemSearchRequest.prototype.getDirector = function () {
            return this.director;
        };
    
        /**
         * Setter for Director
         * 
         * @param {string|null} value 
         */
        ItemSearchRequest.prototype.setDirector = function (value) {
            this.director = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {int|null}
         */
        ItemSearchRequest.prototype.getItemPage = function () {
            return this.itemPage;
        };
    
        /**
         * Setter for ItemPage
         * 
         * @param {int|null} value 
         */
        ItemSearchRequest.prototype.setItemPage = function (value) {
            this.itemPage = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        ItemSearchRequest.prototype.getKeywords = function () {
            return this.keywords;
        };
    
        /**
         * Setter for Keywords
         * 
         * @param {string|null} value 
         */
        ItemSearchRequest.prototype.setKeywords = function (value) {
            this.keywords = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        ItemSearchRequest.prototype.getManufacturer = function () {
            return this.manufacturer;
        };
    
        /**
         * Setter for Manufacturer
         * 
         * @param {string|null} value 
         */
        ItemSearchRequest.prototype.setManufacturer = function (value) {
            this.manufacturer = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {int|null}
         */
        ItemSearchRequest.prototype.getMaximumPrice = function () {
            return this.maximumPrice;
        };
    
        /**
         * Setter for MaximumPrice
         * 
         * @param {int|null} value 
         */
        ItemSearchRequest.prototype.setMaximumPrice = function (value) {
            this.maximumPrice = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        ItemSearchRequest.prototype.getMerchantId = function () {
            return this.merchantId;
        };
    
        /**
         * Setter for MerchantId
         * 
         * @param {string|null} value 
         */
        ItemSearchRequest.prototype.setMerchantId = function (value) {
            this.merchantId = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {int|null}
         */
        ItemSearchRequest.prototype.getMinimumPrice = function () {
            return this.minimumPrice;
        };
    
        /**
         * Setter for MinimumPrice
         * 
         * @param {int|null} value 
         */
        ItemSearchRequest.prototype.setMinimumPrice = function (value) {
            this.minimumPrice = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {int|null}
         */
        ItemSearchRequest.prototype.getMinPercentageOff = function () {
            return this.minPercentageOff;
        };
    
        /**
         * Setter for MinPercentageOff
         * 
         * @param {int|null} value 
         */
        ItemSearchRequest.prototype.setMinPercentageOff = function (value) {
            this.minPercentageOff = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        ItemSearchRequest.prototype.getMusicLabel = function () {
            return this.musicLabel;
        };
    
        /**
         * Setter for MusicLabel
         * 
         * @param {string|null} value 
         */
        ItemSearchRequest.prototype.setMusicLabel = function (value) {
            this.musicLabel = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        ItemSearchRequest.prototype.getOrchestra = function () {
            return this.orchestra;
        };
    
        /**
         * Setter for Orchestra
         * 
         * @param {string|null} value 
         */
        ItemSearchRequest.prototype.setOrchestra = function (value) {
            this.orchestra = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        ItemSearchRequest.prototype.getPower = function () {
            return this.power;
        };
    
        /**
         * Setter for Power
         * 
         * @param {string|null} value 
         */
        ItemSearchRequest.prototype.setPower = function (value) {
            this.power = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        ItemSearchRequest.prototype.getPublisher = function () {
            return this.publisher;
        };
    
        /**
         * Setter for Publisher
         * 
         * @param {string|null} value 
         */
        ItemSearchRequest.prototype.setPublisher = function (value) {
            this.publisher = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {object|null}
         */
        ItemSearchRequest.prototype.getRelatedItemPage = function () {
            return this.relatedItemPage;
        };
    
        /**
         * Setter for RelatedItemPage
         * 
         * @param {object|null} value 
         */
        ItemSearchRequest.prototype.setRelatedItemPage = function (value) {
            this.relatedItemPage = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {array|null}
         */
        ItemSearchRequest.prototype.getRelationshipType = function () {
            return this.relationshipType;
        };
    
        /**
         * Setter for RelationshipType
         * 
         * @param {array|null} value 
         */
        ItemSearchRequest.prototype.setRelationshipType = function (value) {
            this.relationshipType = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {array|null}
         */
        ItemSearchRequest.prototype.getResponseGroup = function () {
            return this.responseGroup;
        };
    
        /**
         * Setter for ResponseGroup
         * 
         * @param {array|null} value 
         */
        ItemSearchRequest.prototype.setResponseGroup = function (value) {
            this.responseGroup = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        ItemSearchRequest.prototype.getSearchIndex = function () {
            return this.searchIndex;
        };
    
        /**
         * Setter for SearchIndex
         * 
         * @param {string|null} value 
         */
        ItemSearchRequest.prototype.setSearchIndex = function (value) {
            this.searchIndex = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        ItemSearchRequest.prototype.getSort = function () {
            return this.sort;
        };
    
        /**
         * Setter for Sort
         * 
         * @param {string|null} value 
         */
        ItemSearchRequest.prototype.setSort = function (value) {
            this.sort = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        ItemSearchRequest.prototype.getTitle = function () {
            return this.title;
        };
    
        /**
         * Setter for Title
         * 
         * @param {string|null} value 
         */
        ItemSearchRequest.prototype.setTitle = function (value) {
            this.title = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        ItemSearchRequest.prototype.getReleaseDate = function () {
            return this.releaseDate;
        };
    
        /**
         * Setter for ReleaseDate
         * 
         * @param {string|null} value 
         */
        ItemSearchRequest.prototype.setReleaseDate = function (value) {
            this.releaseDate = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        ItemSearchRequest.prototype.getIncludeReviewsSummary = function () {
            return this.includeReviewsSummary;
        };
    
        /**
         * Setter for IncludeReviewsSummary
         * 
         * @param {string|null} value 
         */
        ItemSearchRequest.prototype.setIncludeReviewsSummary = function (value) {
            this.includeReviewsSummary = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {int|null}
         */
        ItemSearchRequest.prototype.getTruncateReviewsAt = function () {
            return this.truncateReviewsAt;
        };
    
        /**
         * Setter for TruncateReviewsAt
         * 
         * @param {int|null} value 
         */
        ItemSearchRequest.prototype.setTruncateReviewsAt = function (value) {
            this.truncateReviewsAt = value;
        };
    
        return ItemSearchRequest;
    }

}(angular));
