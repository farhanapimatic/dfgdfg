/**
 * AWSECommerceServiceLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of BrowseNode
 *
 * @constructor
 */
angular.module('AWSECommerceServiceLib')
    .factory('BrowseNode', ['BaseModel', BrowseNodeModel]);

    function BrowseNodeModel(BaseModel) {
        var BrowseNode = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.browseNodeId = this.getValue(obj.browseNodeId);
            this.name = this.getValue(obj.name);
            this.isCategoryRoot = this.getValue(obj.isCategoryRoot);
            this.properties = this.getValue(obj.properties);
            this.children = this.getValue(obj.children);
            this.ancestors = this.getValue(obj.ancestors);
            this.topSellers = this.getValue(obj.topSellers);
            this.newReleases = this.getValue(obj.newReleases);
            this.topItemSet = this.getValue(obj.topItemSet);
        };

        BrowseNode.prototype = new BaseModel();
        BrowseNode.prototype.constructor = BrowseNode;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        BrowseNode.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'browseNodeId', realName: 'BrowseNodeId' },
                { name: 'name', realName: 'Name' },
                { name: 'isCategoryRoot', realName: 'IsCategoryRoot' },
                { name: 'properties', realName: 'Properties', type: 'Properties' },
                { name: 'children', realName: 'Children', type: 'Children' },
                { name: 'ancestors', realName: 'Ancestors', type: 'Ancestors' },
                { name: 'topSellers', realName: 'TopSellers', type: 'TopSellers' },
                { name: 'newReleases', realName: 'NewReleases', type: 'NewReleases' },
                { name: 'topItemSet', realName: 'TopItemSet', array: true, type: 'TopItemSet' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        BrowseNode.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        BrowseNode.prototype.getBrowseNodeId = function () {
            return this.browseNodeId;
        };
    
        /**
         * Setter for BrowseNodeId
         * 
         * @param {string|null} value 
         */
        BrowseNode.prototype.setBrowseNodeId = function (value) {
            this.browseNodeId = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string|null}
         */
        BrowseNode.prototype.getName = function () {
            return this.name;
        };
    
        /**
         * Setter for Name
         * 
         * @param {string|null} value 
         */
        BrowseNode.prototype.setName = function (value) {
            this.name = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {bool|null}
         */
        BrowseNode.prototype.getIsCategoryRoot = function () {
            return this.isCategoryRoot;
        };
    
        /**
         * Setter for IsCategoryRoot
         * 
         * @param {bool|null} value 
         */
        BrowseNode.prototype.setIsCategoryRoot = function (value) {
            this.isCategoryRoot = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {Properties|null}
         */
        BrowseNode.prototype.getProperties = function () {
            return this.properties;
        };
    
        /**
         * Setter for Properties
         * 
         * @param {Properties|null} value 
         */
        BrowseNode.prototype.setProperties = function (value) {
            this.properties = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {Children|null}
         */
        BrowseNode.prototype.getChildren = function () {
            return this.children;
        };
    
        /**
         * Setter for Children
         * 
         * @param {Children|null} value 
         */
        BrowseNode.prototype.setChildren = function (value) {
            this.children = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {Ancestors|null}
         */
        BrowseNode.prototype.getAncestors = function () {
            return this.ancestors;
        };
    
        /**
         * Setter for Ancestors
         * 
         * @param {Ancestors|null} value 
         */
        BrowseNode.prototype.setAncestors = function (value) {
            this.ancestors = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {TopSellers|null}
         */
        BrowseNode.prototype.getTopSellers = function () {
            return this.topSellers;
        };
    
        /**
         * Setter for TopSellers
         * 
         * @param {TopSellers|null} value 
         */
        BrowseNode.prototype.setTopSellers = function (value) {
            this.topSellers = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {NewReleases|null}
         */
        BrowseNode.prototype.getNewReleases = function () {
            return this.newReleases;
        };
    
        /**
         * Setter for NewReleases
         * 
         * @param {NewReleases|null} value 
         */
        BrowseNode.prototype.setNewReleases = function (value) {
            this.newReleases = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {array|null}
         */
        BrowseNode.prototype.getTopItemSet = function () {
            return this.topItemSet;
        };
    
        /**
         * Setter for TopItemSet
         * 
         * @param {array|null} value 
         */
        BrowseNode.prototype.setTopItemSet = function (value) {
            this.topItemSet = value;
        };
    
        return BrowseNode;
    }

}(angular));
